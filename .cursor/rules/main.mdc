---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Slicer Layer Composer

## Project Context
Building a browser-based tool for composing PrusaSlicer profiles from layers/cards.
Tech stack: React + TypeScript + Vite, localStorage, fast-json-patch for applying changes.

## Progress Tracking
**IMPORTANT**: Follow the detailed `IMPLEMENTATION_PLAN.md` file for development phases.
- Update checkboxes (ðŸ”² â†’ âœ…) as tasks are completed
- Mark phase sections as complete when all subtasks are done
- Keep the plan current to track overall progress
- Reference the plan to determine next priorities

## Development Guidelines

### Code Style & Patterns
- Use functional components with hooks
- Prefer TypeScript strict mode
- Use consistent naming: camelCase for variables, PascalCase for components
- Keep components small and focused (< 200 lines)
- Use custom hooks for complex state logic
- Prefer composition over inheritance

### File Organization
**Feature-Based Structure**: Organize code by feature domains, not by file type.

- **Features in `src/features/`** - Each feature is a self-contained module:
  - `src/features/profiles/` - Base profile management, compilation, hooks
  - `src/features/layers/` - Layer cards, drag/drop, card components  
  - `src/features/export/` - INI export, change summaries, file downloads
  - `src/features/projects/` - Project persistence, sharing, URL encoding
  - `src/features/ui/` - Shared UI components and hooks
  - `src/features/onboarding/` - Tours, demos, help content

- **Each feature folder contains**:
  - `index.ts` - Clean exports for the feature's public API
  - Components, hooks, utilities specific to that feature
  - Types can be co-located or use shared `src/types/`

- **Shared resources**:
  - `src/types/` - Global type definitions
  - `src/constants/` - App-wide constants
  - `src/lib/` - Third-party library configurations

- **Import patterns**:
  - Import from feature index: `import { Card, demoCards } from './features/layers'`
  - Cross-feature imports: `import { Button } from '../ui/components/button'`
  - Shared types: `import type { Card } from '../../types'`

### State Management
- Use React's built-in state (useState, useReducer) for local state
- Use localStorage for persistence
- Consider context only for truly global state
- Implement undo/redo with a simple state stack

### Profile & Card System
- Profile = base INI data + applied patches
- Card = JSON patch + metadata (name, description, conflicts)
- Use fast-json-patch for applying changes
- Implement last-write-wins conflict resolution
- Store cards as ordered array

### User Experience
- Drag and drop should feel natural (react-dnd or @dnd-kit)
- Show immediate feedback for actions
- Display conflicts clearly but non-intrusively
- Make sharing via URL simple (base64 encode state)

### Performance
- Keep render cycles minimal
- Debounce expensive operations (profile compilation)
- Use React.memo for pure components
- Lazy load non-critical features

### Error Handling
- Graceful degradation when patches fail
- Clear error messages for users
- Validate INI export before download
- Handle malformed imported projects

### Testing Strategy
- Unit tests for core utilities (patch application, INI export)
- Integration tests for card ordering and conflicts
- E2E test for full user flow (add cards â†’ export INI)
- Test with actual PrusaSlicer profile data

## Specific Patterns

### Card Component Structure
```tsx
interface Card {
  id: string;
  name: string;
  description: string;
  patch: Operation[]; // from fast-json-patch
  enabled: boolean;
  metadata?: {
    author?: string;
    version?: string;
    tags?: string[];
  };
}
```

### Profile System
```tsx
interface Profile {
  name: string;
  baseData: Record<string, any>; // Original INI as JSON
  appliedCards: Card[];
  compiledData: Record<string, any>; // After applying all patches
}
```

### State Shape
```tsx
interface AppState {
  selectedBaseProfile: string;
  cards: Card[];
  cardOrder: string[]; // for drag/drop
  conflicts: ConflictMap;
  exportSettings: ExportSettings;
}
```

## Implementation Priorities
1. Core functionality first (base profiles, cards, export)
2. Basic UI that works
3. Polish and user experience improvements
4. Advanced features (sharing, tours, etc.)

## Context Tracking
**IMPORTANT**: Always check `.llm/context.md` first when starting new work to understand current progress and context.
- Keep a single `context.md` file in the `.llm/` folder for tracking current plans and progress
- This file should contain current status, next tasks, and any relevant context
- Update this file after completing individual tasks or when switching focus areas
- Include current blockers, key decisions, active files, and immediate next steps
- **CRITICAL**: Clear/delete this file before git commits and before creating progress documentation to keep the slate clean after completing features

## Development Workflow
1. **Check `.llm/context.md`** first for current context and progress
2. **Check IMPLEMENTATION_PLAN.md** for current phase and next tasks
3. **Create granular task lists** for complex requests (e.g., "Align the top buttons" level of detail)
4. **Implement features incrementally** - test each component before moving on
5. **Update progress markers** in the plan as tasks complete
6. **Update `.llm/context.md`** with current status and next steps
7. **Commit working states** frequently with descriptive messages
8. **Test core flow** after each major feature addition

## Progress Documentation
**IMPORTANT**: Before each git commit (when user asks for commit):
1. **First clear `.llm/context.md`** to keep the slate clean
2. Create a comprehensive progress summary and save it to the `progress/` folder so it can be included in the same commit:

### Progress Summary Format
- **Filename**: `YYYY-MM-DD-HHMMSS-brief-description.md`
- **Content**: Include milestone achieved, commit hash, files changed, key features implemented, what users can now do, and next steps
- **Structure**: Use markdown with sections for changes summary, new files, modified files, key features, user capabilities, and next steps
- **Implementation plan progress**: Reference current phase completion status
- **IMPORTANT**: Always use `date +"%Y-%m-%d %H:%M:%S"` terminal command to get accurate timestamps - do not rely on training data which may be outdated

### When to Create Progress Summaries
- Before completing git commits for major phases or milestones
- When user requests git commit of significant work (create summary first, then commit together)
- At natural breaking points in development
- When major functionality becomes available to users

This documentation helps track project evolution and maintain development momentum.

## Important Notes
**CRITICAL**: Always use `.cursor/rules/` folder for cursor rules, NOT `.cursorrules` file (which is deprecated). Update rules in `.cursor/rules/main.mdc`.

Remember: Keep it simple, ship fast, iterate based on feedback. Follow the implementation plan to maintain steady progress toward the weekend MVP goal. 